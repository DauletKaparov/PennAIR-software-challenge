import cv2
import numpy as np

# Read the image
image_path = '/Users/dauletkaparov/PycharmProjects/pythonProject/PennAir_2024_App_Static.png'
image = cv2.imread(image_path)

# Check if the image was loaded successfully
if image is None:
    print("Error: Image not found.")
    exit()

# Convert to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply adaptive thresholding to account for varying background textures
adaptive_thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                        cv2.THRESH_BINARY_INV, 11, 2)

# Apply morphological operations to clean up the image
kernel = np.ones((3, 3), np.uint8)
dilated = cv2.dilate(adaptive_thresh, kernel, iterations=2)
eroded = cv2.erode(dilated, kernel, iterations=1)

# Perform edge detection on the eroded image
edges = cv2.Canny(eroded, 50, 150)

# Find contours
contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Inform the user how many shapes were detected
print(f"Detected {len(contours)} shapes.")

# Function to detect and label shapes based on the number of vertices
def detect_shape(contour):
    shape = "unidentified"
    approx = cv2.approxPolyDP(contour, 0.04 * cv2.arcLength(contour, True), True)
    vertices = len(approx)

    if vertices == 3:
        shape = "Triangle"
    elif vertices == 4:
        (x, y, w, h) = cv2.boundingRect(approx)
        aspect_ratio = w / float(h)
        if 0.95 <= aspect_ratio <= 1.05:
            shape = "Square"
        else:
            shape = "Rectangle"
    elif vertices == 5:
        shape = "Pentagon"
    else:
        shape = "Circle"

    return shape, approx

# Loop through each contour to trace the shape and mark the center
for contour in contours:
    # Detect shape and get the approximated contour
    shape, approx = detect_shape(contour)

    # Draw the contour outline (green)
    cv2.drawContours(image, [approx], -1, (0, 255, 0), 2)

    # Compute the centroid using moments
    M = cv2.moments(contour)

    # Check if the contour area is non-zero to calculate center
    if M["m00"] != 0:
        cX = int(M["m10"] / M["m00"])
        cY = int(M["m01"] / M["m00"])

        # Draw the center (blue)
        cv2.circle(image, (cX, cY), 5, (255, 0, 0), -1)

        # Label the shape near the center
        cv2.putText(image, shape, (cX - 20, cY - 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

# Show the final result
cv2.imshow('Shapes with Outlines and Centers', image)
cv2.waitKey(0)
cv2.destroyAllWindows()
